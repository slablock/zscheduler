syntax = "proto3";

import "scalapb/scalapb.proto";
import public "clientActor.proto";

package com.github.slablock.zscheduler.server.actor.protos;

option (scalapb.options) = {
  scope: FILE
  flat_package: false
  single_file: true
  java_conversions: false
  lenses: false
  getters: false
  retain_source_code_info: false
  no_default_values_in_constructor: false
  preserve_unknown_fields: false
  enum_value_naming: CAMEL_CASE
  enum_strip_prefix: false
  no_primitive_wrappers: true
};


message BrokerMsg {
    oneof sealed_value {
        JobSubmitRequest jobSubmitRequest = 1;
        BrokerStatus status = 2;
        SubmitTaskResp submitTaskResp = 3;
        KillTaskResp killTaskResp = 4;
    }
}

message ScheduleExpressionMsg {
    int32 scheduleType = 1; // cron、fix delay 、fix rate 、iso8601
    string expression = 2;
}

message DependencyExpressionMsg {
    int64 preProjectId = 1;
    int64 preFlowId = 2;
    int64 preJobId = 3;
    string rangeExpression = 4;
    string offsetExpression = 5;
}

message ProjectSubmitRequest {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    string projectName = 1;
    string user = 2;
    string sender = 3 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}

message ProjectUpdateRequest {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    int64 projectId = 1;
    string projectName = 2;
    string user = 3;
    string updateUser = 4;
    string sender = 5 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}


message ProjectQueryRequest {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    int64 projectId = 1;
    string sender = 2 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}

message FlowSubmitRequest {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    int64 projectId = 1;
    string flowName = 2;
    string user = 3;
    repeated DependencyExpressionMsg dependencies = 4;
    repeated ScheduleExpressionMsg schedules = 5;
    string sender = 6 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}

message FlowUpdateRequest {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    int64 flowId = 1;
    int64 projectId = 2;
    string flowName = 3;
    string user = 4;
    string updateUser = 5;
    repeated DependencyExpressionMsg dependencies = 6;
    repeated ScheduleExpressionMsg schedules = 7;
    string sender = 8 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}


message FlowQueryRequest {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    int64 flowId = 1;
    string sender = 2 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}


message JobSubmitRequest {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    int64 projectId = 1;
    int64 flowId = 2;
    string jobName = 3;
    int32 jobType = 4;
    int32 contentType = 5;
    string content = 6;
    string params = 7;
    int32 priority = 8;
    string user = 9;
    repeated DependencyExpressionMsg dependencies = 10;
    string sender = 11 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}

message JobUpdateRequest {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    int64 jobId = 1;
    int64 projectId = 2;
    int64 flowId = 3;
    string jobName = 4;
    int32 jobType = 5;
    int32 contentType = 6;
    string content = 7;
    string params = 8;
    int32 priority = 9;
    string user = 10;
    string updateUser = 11;
    repeated DependencyExpressionMsg dependencies = 12;
    string sender = 13 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}


message JobQueryRequest {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    int64 jobId = 1;
    string sender = 2 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}


message JobQueryStatusRequest {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    int64 jobId = 1;
    string sender = 2 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}

message JobQueryLogRequest {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    int64 jobId = 1;
    int32 logType = 2;
    string sender = 3 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}

message BrokerStatus {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    string sender = 1 [(scalapb.field).type = "akka.actor.typed.ActorRef[com.github.slablock.zscheduler.server.actor.ClientActor.ClientCommand]"];
}

message SubmitTaskResp {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    bool accept = 1;
    bool success = 2;
    string message = 3;
    int32 status = 4;
}

message KillTaskResp {
    option (scalapb.message).extends = "com.github.slablock.zscheduler.server.actor.BrokerActor.BrokerCommand";
    bool success = 1;
    string message = 2;
}
