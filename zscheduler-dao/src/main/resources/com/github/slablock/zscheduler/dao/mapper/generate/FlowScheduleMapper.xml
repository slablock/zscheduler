<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.slablock.zscheduler.dao.mapper.generate.FlowScheduleMapper">
  <resultMap id="BaseResultMap" type="com.github.slablock.zscheduler.dao.dto.generate.FlowSchedule">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="projectId" jdbcType="BIGINT" property="projectId" />
    <result column="flowId" jdbcType="BIGINT" property="flowId" />
    <result column="scheduleType" jdbcType="INTEGER" property="scheduleType" />
    <result column="expression" jdbcType="VARCHAR" property="expression" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, projectId, flowId, scheduleType, expression, createTime, updateTime
  </sql>
  <select id="selectByExample" parameterType="com.github.slablock.zscheduler.dao.dto.generate.FlowScheduleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from flow_schedule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from flow_schedule
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from flow_schedule
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.github.slablock.zscheduler.dao.dto.generate.FlowScheduleExample">
    delete from flow_schedule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.github.slablock.zscheduler.dao.dto.generate.FlowSchedule">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into flow_schedule (projectId, flowId, scheduleType, 
      expression, createTime, updateTime
      )
    values (#{projectId,jdbcType=BIGINT}, #{flowId,jdbcType=BIGINT}, #{scheduleType,jdbcType=INTEGER}, 
      #{expression,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.github.slablock.zscheduler.dao.dto.generate.FlowSchedule">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into flow_schedule
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="projectId != null">
        projectId,
      </if>
      <if test="flowId != null">
        flowId,
      </if>
      <if test="scheduleType != null">
        scheduleType,
      </if>
      <if test="expression != null">
        expression,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="projectId != null">
        #{projectId,jdbcType=BIGINT},
      </if>
      <if test="flowId != null">
        #{flowId,jdbcType=BIGINT},
      </if>
      <if test="scheduleType != null">
        #{scheduleType,jdbcType=INTEGER},
      </if>
      <if test="expression != null">
        #{expression,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.github.slablock.zscheduler.dao.dto.generate.FlowScheduleExample" resultType="java.lang.Long">
    select count(*) from flow_schedule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update flow_schedule
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.projectId != null">
        projectId = #{record.projectId,jdbcType=BIGINT},
      </if>
      <if test="record.flowId != null">
        flowId = #{record.flowId,jdbcType=BIGINT},
      </if>
      <if test="record.scheduleType != null">
        scheduleType = #{record.scheduleType,jdbcType=INTEGER},
      </if>
      <if test="record.expression != null">
        expression = #{record.expression,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update flow_schedule
    set id = #{record.id,jdbcType=BIGINT},
      projectId = #{record.projectId,jdbcType=BIGINT},
      flowId = #{record.flowId,jdbcType=BIGINT},
      scheduleType = #{record.scheduleType,jdbcType=INTEGER},
      expression = #{record.expression,jdbcType=VARCHAR},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      updateTime = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.slablock.zscheduler.dao.dto.generate.FlowSchedule">
    update flow_schedule
    <set>
      <if test="projectId != null">
        projectId = #{projectId,jdbcType=BIGINT},
      </if>
      <if test="flowId != null">
        flowId = #{flowId,jdbcType=BIGINT},
      </if>
      <if test="scheduleType != null">
        scheduleType = #{scheduleType,jdbcType=INTEGER},
      </if>
      <if test="expression != null">
        expression = #{expression,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.slablock.zscheduler.dao.dto.generate.FlowSchedule">
    update flow_schedule
    set projectId = #{projectId,jdbcType=BIGINT},
      flowId = #{flowId,jdbcType=BIGINT},
      scheduleType = #{scheduleType,jdbcType=INTEGER},
      expression = #{expression,jdbcType=VARCHAR},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      updateTime = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>