<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.slablock.zscheduler.dao.mapper.generate.JobMapper">
  <resultMap id="BaseResultMap" type="com.github.slablock.zscheduler.dao.dto.generate.Job">
    <id column="jobId" jdbcType="BIGINT" property="jobId" />
    <result column="projectId" jdbcType="BIGINT" property="projectId" />
    <result column="jobName" jdbcType="VARCHAR" property="jobName" />
    <result column="jobType" jdbcType="INTEGER" property="jobType" />
    <result column="contentType" jdbcType="INTEGER" property="contentType" />
    <result column="params" jdbcType="VARCHAR" property="params" />
    <result column="priority" jdbcType="INTEGER" property="priority" />
    <result column="user" jdbcType="VARCHAR" property="user" />
    <result column="updateUser" jdbcType="VARCHAR" property="updateUser" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.github.slablock.zscheduler.dao.dto.generate.Job">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    jobId, projectId, jobName, jobType, contentType, params, priority, user, updateUser, 
    createTime, updateTime
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.github.slablock.zscheduler.dao.dto.generate.JobExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.github.slablock.zscheduler.dao.dto.generate.JobExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from job
    where jobId = #{jobId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from job
    where jobId = #{jobId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.github.slablock.zscheduler.dao.dto.generate.JobExample">
    delete from job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.github.slablock.zscheduler.dao.dto.generate.Job">
    <selectKey keyProperty="jobId" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into job (projectId, jobName, jobType, 
      contentType, params, priority, 
      user, updateUser, createTime, 
      updateTime, content)
    values (#{projectId,jdbcType=BIGINT}, #{jobName,jdbcType=VARCHAR}, #{jobType,jdbcType=INTEGER}, 
      #{contentType,jdbcType=INTEGER}, #{params,jdbcType=VARCHAR}, #{priority,jdbcType=INTEGER}, 
      #{user,jdbcType=VARCHAR}, #{updateUser,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.github.slablock.zscheduler.dao.dto.generate.Job">
    <selectKey keyProperty="jobId" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into job
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="projectId != null">
        projectId,
      </if>
      <if test="jobName != null">
        jobName,
      </if>
      <if test="jobType != null">
        jobType,
      </if>
      <if test="contentType != null">
        contentType,
      </if>
      <if test="params != null">
        params,
      </if>
      <if test="priority != null">
        priority,
      </if>
      <if test="user != null">
        user,
      </if>
      <if test="updateUser != null">
        updateUser,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="projectId != null">
        #{projectId,jdbcType=BIGINT},
      </if>
      <if test="jobName != null">
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobType != null">
        #{jobType,jdbcType=INTEGER},
      </if>
      <if test="contentType != null">
        #{contentType,jdbcType=INTEGER},
      </if>
      <if test="params != null">
        #{params,jdbcType=VARCHAR},
      </if>
      <if test="priority != null">
        #{priority,jdbcType=INTEGER},
      </if>
      <if test="user != null">
        #{user,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.github.slablock.zscheduler.dao.dto.generate.JobExample" resultType="java.lang.Long">
    select count(*) from job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update job
    <set>
      <if test="record.jobId != null">
        jobId = #{record.jobId,jdbcType=BIGINT},
      </if>
      <if test="record.projectId != null">
        projectId = #{record.projectId,jdbcType=BIGINT},
      </if>
      <if test="record.jobName != null">
        jobName = #{record.jobName,jdbcType=VARCHAR},
      </if>
      <if test="record.jobType != null">
        jobType = #{record.jobType,jdbcType=INTEGER},
      </if>
      <if test="record.contentType != null">
        contentType = #{record.contentType,jdbcType=INTEGER},
      </if>
      <if test="record.params != null">
        params = #{record.params,jdbcType=VARCHAR},
      </if>
      <if test="record.priority != null">
        priority = #{record.priority,jdbcType=INTEGER},
      </if>
      <if test="record.user != null">
        user = #{record.user,jdbcType=VARCHAR},
      </if>
      <if test="record.updateUser != null">
        updateUser = #{record.updateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update job
    set jobId = #{record.jobId,jdbcType=BIGINT},
      projectId = #{record.projectId,jdbcType=BIGINT},
      jobName = #{record.jobName,jdbcType=VARCHAR},
      jobType = #{record.jobType,jdbcType=INTEGER},
      contentType = #{record.contentType,jdbcType=INTEGER},
      params = #{record.params,jdbcType=VARCHAR},
      priority = #{record.priority,jdbcType=INTEGER},
      user = #{record.user,jdbcType=VARCHAR},
      updateUser = #{record.updateUser,jdbcType=VARCHAR},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update job
    set jobId = #{record.jobId,jdbcType=BIGINT},
      projectId = #{record.projectId,jdbcType=BIGINT},
      jobName = #{record.jobName,jdbcType=VARCHAR},
      jobType = #{record.jobType,jdbcType=INTEGER},
      contentType = #{record.contentType,jdbcType=INTEGER},
      params = #{record.params,jdbcType=VARCHAR},
      priority = #{record.priority,jdbcType=INTEGER},
      user = #{record.user,jdbcType=VARCHAR},
      updateUser = #{record.updateUser,jdbcType=VARCHAR},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      updateTime = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.slablock.zscheduler.dao.dto.generate.Job">
    update job
    <set>
      <if test="projectId != null">
        projectId = #{projectId,jdbcType=BIGINT},
      </if>
      <if test="jobName != null">
        jobName = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobType != null">
        jobType = #{jobType,jdbcType=INTEGER},
      </if>
      <if test="contentType != null">
        contentType = #{contentType,jdbcType=INTEGER},
      </if>
      <if test="params != null">
        params = #{params,jdbcType=VARCHAR},
      </if>
      <if test="priority != null">
        priority = #{priority,jdbcType=INTEGER},
      </if>
      <if test="user != null">
        user = #{user,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null">
        updateUser = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where jobId = #{jobId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.github.slablock.zscheduler.dao.dto.generate.Job">
    update job
    set projectId = #{projectId,jdbcType=BIGINT},
      jobName = #{jobName,jdbcType=VARCHAR},
      jobType = #{jobType,jdbcType=INTEGER},
      contentType = #{contentType,jdbcType=INTEGER},
      params = #{params,jdbcType=VARCHAR},
      priority = #{priority,jdbcType=INTEGER},
      user = #{user,jdbcType=VARCHAR},
      updateUser = #{updateUser,jdbcType=VARCHAR},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      updateTime = #{updateTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where jobId = #{jobId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.slablock.zscheduler.dao.dto.generate.Job">
    update job
    set projectId = #{projectId,jdbcType=BIGINT},
      jobName = #{jobName,jdbcType=VARCHAR},
      jobType = #{jobType,jdbcType=INTEGER},
      contentType = #{contentType,jdbcType=INTEGER},
      params = #{params,jdbcType=VARCHAR},
      priority = #{priority,jdbcType=INTEGER},
      user = #{user,jdbcType=VARCHAR},
      updateUser = #{updateUser,jdbcType=VARCHAR},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      updateTime = #{updateTime,jdbcType=TIMESTAMP}
    where jobId = #{jobId,jdbcType=BIGINT}
  </update>
</mapper>