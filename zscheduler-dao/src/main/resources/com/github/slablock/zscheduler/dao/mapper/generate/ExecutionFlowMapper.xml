<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.slablock.zscheduler.dao.mapper.generate.ExecutionFlowMapper">
  <resultMap id="BaseResultMap" type="com.github.slablock.zscheduler.dao.dto.generate.ExecutionFlow">
    <id column="execId" jdbcType="BIGINT" property="execId" />
    <result column="attemptId" jdbcType="INTEGER" property="attemptId" />
    <result column="projectId" jdbcType="BIGINT" property="projectId" />
    <result column="flowId" jdbcType="BIGINT" property="flowId" />
    <result column="scheduleTime" jdbcType="TIMESTAMP" property="scheduleTime" />
    <result column="dataTime" jdbcType="TIMESTAMP" property="dataTime" />
    <result column="progress" jdbcType="REAL" property="progress" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="executeUser" jdbcType="VARCHAR" property="executeUser" />
    <result column="executeStartTime" jdbcType="TIMESTAMP" property="executeStartTime" />
    <result column="executeEndTime" jdbcType="TIMESTAMP" property="executeEndTime" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    execId, attemptId, projectId, flowId, scheduleTime, dataTime, progress, status, executeUser, 
    executeStartTime, executeEndTime, createTime, updateTime
  </sql>
  <select id="selectByExample" parameterType="com.github.slablock.zscheduler.dao.dto.generate.ExecutionFlowExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from execution_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from execution_flow
    where execId = #{execId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from execution_flow
    where execId = #{execId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.github.slablock.zscheduler.dao.dto.generate.ExecutionFlowExample">
    delete from execution_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.github.slablock.zscheduler.dao.dto.generate.ExecutionFlow">
    <selectKey keyProperty="execId" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into execution_flow (attemptId, projectId, flowId, 
      scheduleTime, dataTime, progress, 
      status, executeUser, executeStartTime, 
      executeEndTime, createTime, updateTime
      )
    values (#{attemptId,jdbcType=INTEGER}, #{projectId,jdbcType=BIGINT}, #{flowId,jdbcType=BIGINT}, 
      #{scheduleTime,jdbcType=TIMESTAMP}, #{dataTime,jdbcType=TIMESTAMP}, #{progress,jdbcType=REAL}, 
      #{status,jdbcType=INTEGER}, #{executeUser,jdbcType=VARCHAR}, #{executeStartTime,jdbcType=TIMESTAMP}, 
      #{executeEndTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.github.slablock.zscheduler.dao.dto.generate.ExecutionFlow">
    <selectKey keyProperty="execId" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into execution_flow
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="attemptId != null">
        attemptId,
      </if>
      <if test="projectId != null">
        projectId,
      </if>
      <if test="flowId != null">
        flowId,
      </if>
      <if test="scheduleTime != null">
        scheduleTime,
      </if>
      <if test="dataTime != null">
        dataTime,
      </if>
      <if test="progress != null">
        progress,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="executeUser != null">
        executeUser,
      </if>
      <if test="executeStartTime != null">
        executeStartTime,
      </if>
      <if test="executeEndTime != null">
        executeEndTime,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="attemptId != null">
        #{attemptId,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=BIGINT},
      </if>
      <if test="flowId != null">
        #{flowId,jdbcType=BIGINT},
      </if>
      <if test="scheduleTime != null">
        #{scheduleTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dataTime != null">
        #{dataTime,jdbcType=TIMESTAMP},
      </if>
      <if test="progress != null">
        #{progress,jdbcType=REAL},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="executeUser != null">
        #{executeUser,jdbcType=VARCHAR},
      </if>
      <if test="executeStartTime != null">
        #{executeStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="executeEndTime != null">
        #{executeEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.github.slablock.zscheduler.dao.dto.generate.ExecutionFlowExample" resultType="java.lang.Long">
    select count(*) from execution_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update execution_flow
    <set>
      <if test="record.execId != null">
        execId = #{record.execId,jdbcType=BIGINT},
      </if>
      <if test="record.attemptId != null">
        attemptId = #{record.attemptId,jdbcType=INTEGER},
      </if>
      <if test="record.projectId != null">
        projectId = #{record.projectId,jdbcType=BIGINT},
      </if>
      <if test="record.flowId != null">
        flowId = #{record.flowId,jdbcType=BIGINT},
      </if>
      <if test="record.scheduleTime != null">
        scheduleTime = #{record.scheduleTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dataTime != null">
        dataTime = #{record.dataTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.progress != null">
        progress = #{record.progress,jdbcType=REAL},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.executeUser != null">
        executeUser = #{record.executeUser,jdbcType=VARCHAR},
      </if>
      <if test="record.executeStartTime != null">
        executeStartTime = #{record.executeStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.executeEndTime != null">
        executeEndTime = #{record.executeEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update execution_flow
    set execId = #{record.execId,jdbcType=BIGINT},
      attemptId = #{record.attemptId,jdbcType=INTEGER},
      projectId = #{record.projectId,jdbcType=BIGINT},
      flowId = #{record.flowId,jdbcType=BIGINT},
      scheduleTime = #{record.scheduleTime,jdbcType=TIMESTAMP},
      dataTime = #{record.dataTime,jdbcType=TIMESTAMP},
      progress = #{record.progress,jdbcType=REAL},
      status = #{record.status,jdbcType=INTEGER},
      executeUser = #{record.executeUser,jdbcType=VARCHAR},
      executeStartTime = #{record.executeStartTime,jdbcType=TIMESTAMP},
      executeEndTime = #{record.executeEndTime,jdbcType=TIMESTAMP},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      updateTime = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.slablock.zscheduler.dao.dto.generate.ExecutionFlow">
    update execution_flow
    <set>
      <if test="attemptId != null">
        attemptId = #{attemptId,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        projectId = #{projectId,jdbcType=BIGINT},
      </if>
      <if test="flowId != null">
        flowId = #{flowId,jdbcType=BIGINT},
      </if>
      <if test="scheduleTime != null">
        scheduleTime = #{scheduleTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dataTime != null">
        dataTime = #{dataTime,jdbcType=TIMESTAMP},
      </if>
      <if test="progress != null">
        progress = #{progress,jdbcType=REAL},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="executeUser != null">
        executeUser = #{executeUser,jdbcType=VARCHAR},
      </if>
      <if test="executeStartTime != null">
        executeStartTime = #{executeStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="executeEndTime != null">
        executeEndTime = #{executeEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where execId = #{execId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.slablock.zscheduler.dao.dto.generate.ExecutionFlow">
    update execution_flow
    set attemptId = #{attemptId,jdbcType=INTEGER},
      projectId = #{projectId,jdbcType=BIGINT},
      flowId = #{flowId,jdbcType=BIGINT},
      scheduleTime = #{scheduleTime,jdbcType=TIMESTAMP},
      dataTime = #{dataTime,jdbcType=TIMESTAMP},
      progress = #{progress,jdbcType=REAL},
      status = #{status,jdbcType=INTEGER},
      executeUser = #{executeUser,jdbcType=VARCHAR},
      executeStartTime = #{executeStartTime,jdbcType=TIMESTAMP},
      executeEndTime = #{executeEndTime,jdbcType=TIMESTAMP},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      updateTime = #{updateTime,jdbcType=TIMESTAMP}
    where execId = #{execId,jdbcType=BIGINT}
  </update>
</mapper>